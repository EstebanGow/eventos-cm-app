name: Code Development Flow
concurrency: ${{ github.event.repository.name }}-dev
on:
    push:
        branches:
            - 'dev'
env:
    SERVICE_NAME: ${{ github.event.repository.name }}
    PROJECT_CLUSTER_ID: ${{ secrets.PROJECT_CLUSTER_ID_DEV }}
    PROJECT_ID: ${{ secrets.PROJECT_ID_DEV }}
    URL_EXAMPLE: ${{ secrets.URL_EXAMPLE_DEV }}
    CLUSTER_NAME: cm-cluster
    CLUSTER_LOCATION: us-central1
    ENV_FILE: env/dev.env
    ENV: dev
    HOST: apiv2-dev.coordinadora.com
    URL_DOC: https://apiv2-dev.coordinadora.com/plantillas/${{ github.event.repository.name }}/docs/json
    IS_PUBLIC: false
    DOMAIN: plantillas
    SUB_DOMAIN: example #campo opcional --> eliminar tambien del paso de la documentacion

jobs:
    build_and_deploy:
        runs-on: ubuntu-latest
        name: Build and deploy
        steps:
            - name: Checkout
              uses: actions/checkout@v3
            - name: Cache node modules
              uses: actions/cache@v3
              with:
                  path: '**/node_modules'
                  key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
            - name: Install and Build
              uses: ./.github/actions/build
            - name: Build tests
              uses: ./.github/actions/quality
            # - name: SonarQube Scan
            #   uses: sonarsource/sonarqube-scan-action@master
            #   with:
            #     projectBaseDir: .
            #   env:
            #     SONAR_HOST_URL: ${{ secrets.SONARQUBE_HOST }}
            #     SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
            # - name: SonarQube Quality Gate check
            #   uses: sonarsource/sonarqube-quality-gate-action@master
            #   timeout-minutes: 5
            #   env:
            #     SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
            #   with:
            #     scanMetadataReportFile: ./.scannerwork/report-task.txt
            - name: Set up Cloud SDK
              uses: google-github-actions/setup-gcloud@v0
              with:
                  project_id: ${{ env.PROJECT_CLUSTER_ID }}
                  service_account_key: ${{ secrets.CM_GCP_KEY }}
                  export_default_credentials: true
            - name: Env variable
              run: |
                  echo "GCP_PROJECT=${{env.PROJECT_ID}}" >> ${{ env.ENV_FILE }}
                  echo "SERVICE_NAME=${{env.SERVICE_NAME}}" >> ${{ env.ENV_FILE }}
                  echo "HOST=${{env.HOST}}" >> ${{ env.ENV_FILE }}
                  echo "DOMAIN=${{env.DOMAIN}}" >> ${{ env.ENV_FILE }}
                  echo "API_EXAMPLE=${{env.URL_EXAMPLE}}" >> ${{ env.ENV_FILE }}
            - name: Create ENV File
              run: cp ${{ env.ENV_FILE }} .env
            - name: Build and deploy image
              run: PROJECT_ID=$PROJECT_CLUSTER_ID COMMIT_SHA=${{ github.sha }} SERVICE_NAME=$SERVICE_NAME make deploy

    terraform:
        runs-on: ubuntu-latest
        name: Infra as Code
        needs: build_and_deploy
        steps:
            - name: Checkout
              uses: actions/checkout@v3
            - name: Set branch-based environment variables
              uses: iamtheyammer/branch-env-vars@v1.0.3
              with:
                  GCP_PROJECT: |
                      master:${{ secrets.PROJECT_ID_PROD }}
                      testing:${{ secrets.PROJECT_ID_TEST }}
                      !default:${{ secrets.PROJECT_ID_DEV }}
            - name: Set up Cloud SDK
              uses: google-github-actions/setup-gcloud@v0
              with:
                  project_id: ${{ env.GCP_PROJECT }}
                  host: ${{ env.HOST }}
                  service_name: ${{ env.SERVICE_NAME }}
                  service_account_key: ${{ secrets.CM_GCP_KEY }}
                  export_default_credentials: true
            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v1
            - name: Init Terraform
              run: make terraform-init
            - name: Create Workspace Terraform
              run: ENV=${{ env.ENV }} make terraform-create-workspace
            - name: Apply Terraform
              run: PROJECT_ID=$GCP_PROJECT HOST=$HOST SERVICE_NAME=$SERVICE_NAME ENV=${{ env.ENV }} DOMAIN=$DOMAIN make terraform-apply

    kubernetes:
        runs-on: ubuntu-latest
        name: Kubernetes
        needs: terraform
        steps:
            - name: Checkout
              uses: actions/checkout@v3
            - name: Set up Cloud SDK
              uses: google-github-actions/setup-gcloud@v0
              with:
                  project_id: ${{ env.PROJECT_CLUSTER_ID }}
                  service_account_key: ${{ secrets.CM_GCP_KEY }}
                  export_default_credentials: true
            - id: get-credentials
              name: Get Credentials
              uses: google-github-actions/get-gke-credentials@main
              with:
                  cluster_name: ${{ env.CLUSTER_NAME }}
                  location: ${{ env.CLUSTER_LOCATION }}
                  credentials: ${{ secrets.CM_GCP_KEY }}
                  project_id: ${{ env.PROJECT_CLUSTER_ID }}
                  service_name: ${{ env.SERVICE_NAME}}
                  domain: ${{ env.DOMAIN}}
            - name: Setup Kustomize
              uses: imranismail/setup-kustomize@v1
              with:
                  kustomize-version: '3.9.2'
            - name: Update image
              run: kustomize edit set image PROJECT/IMAGE=gcr.io/$PROJECT_CLUSTER_ID/$SERVICE_NAME:$GITHUB_SHA
              working-directory: ./manifests/overlays/${{ env.ENV }}
            - name: Build and Deploy
              run: HOST=$HOST SERVICE_NAME=$SERVICE_NAME GCP_PROJECT=$PROJECT_ID DOMAIN=$DOMAIN kustomize build . | envsubst | kubectl apply -f -
              working-directory: ./manifests/overlays//${{ env.ENV }}
            - name: Delete pods
              run: kubectl --namespace=apis delete pod -l app=$SERVICE_NAME

    documentation:
        runs-on: ubuntu-latest
        name: Documentation
        needs: kubernetes
        steps:
            - name: Documentation
              id: myRequest
              uses: fjogeleit/http-request-action@v1
              with:
                  url: ${{ secrets.PORTAL_URL_DEV }}
                  method: 'POST'
                  contentType: application/json
                  data: '{"id":"${{ env.SERVICE_NAME }}", "nombre": "${{ env.SERVICE_NAME }}", "dominio": "${{ env.DOMAIN }}", "subdominio": "${{ env.SUB_DOMAIN }}", "isPublic": ${{ env.IS_PUBLIC }}, "urlDoc": "${{ env.URL_DOC }}"}'
            - name: Response
              run: echo ${{ steps.myRequest.outputs.response }}

    create_pull_request:
        runs-on: ubuntu-latest
        needs: documentation
        name: Testing Pull Request
        steps:
            - uses: actions/checkout@v3

            - name: Make changes to pull request
              run: date +%s > report.txt

            - name: Create Pull Request
              id: cpr
              uses: peter-evans/create-pull-request@v5
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}
                  commit-message: merging feature into dev
                  author: ${{ github.actor }} <${{ github.actor }}>
                  signoff: false
                  branch: ${{ github.ref }}
                  base: testing
                  title: 'Merge dev into testing branch'
                  body: |
                      Update report
                      desplegando dev nuevos en testing. :heart:
                  labels: |
                      report
                      automated pr

    slackNotification:
        name: Slack Notification
        runs-on: ubuntu-latest
        needs: [build_and_deploy, terraform, kubernetes, documentation, create_pull_request]
        if: ${{ success() }}
        steps:
            - uses: actions/checkout@v3
            - name: Slack Notification
              uses: rtCamp/action-slack-notify@v2
              env:
                  SLACK_CHANNEL: alerts
                  SLACK_COLOR: ${{ job.status }}
                  SLACK_ICON: https://github.com/coordinadora-mercantil.png?size=48
                  SLACK_TITLE: ${{ github.repository }}
                  SLACK_MESSAGE: |-
                      ¡Grandioso! El pipeline del proyecto ${{ github.repository }} en dev fue exitoso
                      Verificalo en el URL ${{ env.HOST }}/${{ env.DOMAIN }}/${{ env.SERVICE_NAME }}
                      Para ver los logs del servicio:
                      https://console.cloud.google.com/kubernetes/deployment/${{env.CLUSTER_LOCATION}}/${{env.CLUSTER_NAME}}/apis/${{env.SERVICE_NAME}}/logs?project=${{env.PROJECT_CLUSTER_ID}}
                      Para ver la documentación:
                      https://${{env.HOST}}/${{env.DOMAIN}}/${{env.SERVICE_NAME}}/docs
                      ¡Sigue así! :rocket:
                  SLACK_USERNAME: Kubo
                  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
                  SLACK_FOOTER: 'Made with :heart: by Coordinadora'
    slackNotificationFailure:
        name: Slack Notification failure
        runs-on: ubuntu-latest
        needs: [build_and_deploy, terraform, kubernetes, documentation, create_pull_request]
        if: ${{ failure() }}
        steps:
            - uses: actions/checkout@v3
            - name: Slack Notification
              uses: rtCamp/action-slack-notify@v2
              env:
                  SLACK_CHANNEL: alerts
                  SLACK_COLOR: '#FF0000'
                  SLACK_ICON: https://github.com/coordinadora-mercantil.png?size=48
                  SLACK_TITLE: ${{ github.repository }}
                  SLACK_MESSAGE: |-
                      El pipeline del proyecto ${{ github.repository }} no fue exitoso
                      ¡Lo siento mucho :cry:! A la próxima se corrige, no te preocupes por eso.
                  SLACK_USERNAME: Kubo
                  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
                  SLACK_FOOTER: 'Made with :heart: by Coordinadora'
